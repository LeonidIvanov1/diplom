/***************************TABLES*************************/
CREATE TABLE USER_ROLE_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(150),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM USER_ROLE_NAME_SYN FOR USER_ROLE_NAME;
CREATE VIEW USER_ROLE_VIEW AS
SELECT USER_ROLE_NAME_SYN.ID              AS ID,
       (SELECT USER_ROLE_NAME.VALUE
        FROM USER_ROLE_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM USER_ROLE_NAME
                             WHERE ID = USER_ROLE_NAME_SYN.ID
                             GROUP BY USER_ROLE_NAME_SYN.ID)
          AND ID = USER_ROLE_NAME_SYN.ID) AS NAME
FROM USER_ROLE_NAME_SYN,
     USER_ROLE_NAME
WHERE USER_ROLE_NAME_SYN.ID = USER_ROLE_NAME.ID
GROUP BY USER_ROLE_NAME_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE USER_ROLE_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_USER_ROLE(NAME VARCHAR) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := USER_ROLE_SEQ.NEXTVAL;
BEGIN
    INSERT INTO USER_ROLE_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, NAME, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_USER_ROLE(NAME VARCHAR, ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_USER_ROLE_NAME VARCHAR(150);
BEGIN
    SELECT USER_ROLE_NAME.VALUE INTO LAST_USER_ROLE_NAME
    FROM USER_ROLE_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM USER_ROLE_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF NAME !=
       LAST_USER_ROLE_NAME THEN
        INSERT INTO USER_ROLE_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, NAME, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_USER_ROLE(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM USER_ROLE_NAME
    WHERE USER_ROLE_NAME.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE USER_STATUS_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(150),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM USER_STATUS_NAME_SYN FOR USER_STATUS_NAME;
CREATE VIEW USER_STATUS_VIEW AS
SELECT USER_STATUS_NAME_SYN.ID              AS ID,
       (SELECT USER_STATUS_NAME.VALUE
        FROM USER_STATUS_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM USER_STATUS_NAME
                             WHERE ID = USER_STATUS_NAME_SYN.ID
                             GROUP BY USER_STATUS_NAME_SYN.ID)
          AND ID = USER_STATUS_NAME_SYN.ID) AS NAME
FROM USER_STATUS_NAME_SYN,
     USER_STATUS_NAME
WHERE USER_STATUS_NAME_SYN.ID = USER_STATUS_NAME.ID
GROUP BY USER_STATUS_NAME_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE USER_STATUS_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_USER_STATUS(NAME VARCHAR) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := USER_STATUS_SEQ.NEXTVAL;
BEGIN
    INSERT INTO USER_STATUS_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, NAME, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_USER_STATUS(NAME VARCHAR, ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_USER_STATUS_NAME VARCHAR(150);
BEGIN
    SELECT USER_STATUS_NAME.VALUE INTO LAST_USER_STATUS_NAME
    FROM USER_STATUS_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM USER_STATUS_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF NAME !=
       LAST_USER_STATUS_NAME THEN
        INSERT INTO USER_STATUS_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, NAME, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_USER_STATUS(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM USER_STATUS_NAME
    WHERE USER_STATUS_NAME.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE USER_LOGIN
(
    ID          NUMBER(10),
    VALUE       VARCHAR(20),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE USER_PASSWORD
(
    ID          NUMBER(10),
    VALUE       VARCHAR(20),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE USER_FULL_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(250),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE USER_ROLE
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE USER_STATUS
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM USER_LOGIN_SYN FOR USER_LOGIN;
CREATE VIEW USER_VIEW AS
SELECT USER_LOGIN_SYN.ID              AS ID,
       (SELECT USER_LOGIN.VALUE
        FROM USER_LOGIN
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM USER_LOGIN
                             WHERE ID = USER_LOGIN_SYN.ID
                             GROUP BY USER_LOGIN_SYN.ID)
          AND ID = USER_LOGIN_SYN.ID) AS LOGIN,
       (SELECT USER_PASSWORD.VALUE
        FROM USER_PASSWORD
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM USER_PASSWORD
                             WHERE ID = USER_LOGIN_SYN.ID
                             GROUP BY USER_LOGIN_SYN.ID)
          AND ID = USER_LOGIN_SYN.ID) AS PASSWORD,
       (SELECT USER_FULL_NAME.VALUE
        FROM USER_FULL_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM USER_FULL_NAME
                             WHERE ID = USER_LOGIN_SYN.ID
                             GROUP BY USER_LOGIN_SYN.ID)
          AND ID = USER_LOGIN_SYN.ID) AS FULL_NAME,
       (SELECT USER_ROLE.VALUE
        FROM USER_ROLE
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM USER_ROLE
                             WHERE ID = USER_LOGIN_SYN.ID
                             GROUP BY USER_LOGIN_SYN.ID)
          AND ID = USER_LOGIN_SYN.ID) AS ROLE,
       (SELECT USER_STATUS.VALUE
        FROM USER_STATUS
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM USER_STATUS
                             WHERE ID = USER_LOGIN_SYN.ID
                             GROUP BY USER_LOGIN_SYN.ID)
          AND ID = USER_LOGIN_SYN.ID) AS STATUS
FROM USER_LOGIN_SYN,
     USER_LOGIN,
     USER_PASSWORD,
     USER_FULL_NAME,
     USER_ROLE,
     USER_STATUS
WHERE USER_LOGIN_SYN.ID = USER_LOGIN.ID
  AND USER_LOGIN_SYN.ID = USER_PASSWORD.ID
  AND USER_LOGIN_SYN.ID = USER_FULL_NAME.ID
  AND USER_LOGIN_SYN.ID = USER_ROLE.ID
  AND USER_LOGIN_SYN.ID = USER_STATUS.ID
GROUP BY USER_LOGIN_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE USER_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_USER(LOGIN VARCHAR, PASSWORD VARCHAR,
                                     FULL_NAME VARCHAR, ROLE NUMBER,
                                     STATUS NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := USER_SEQ.NEXTVAL;
BEGIN
    INSERT INTO USER_LOGIN
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, LOGIN, CurDate);
    INSERT INTO USER_PASSWORD
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, PASSWORD, CurDate);
    INSERT INTO USER_FULL_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, FULL_NAME, CurDate);
    INSERT INTO USER_ROLE
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, ROLE, CurDate);
    INSERT INTO USER_STATUS
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, STATUS, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_USER(LOGIN VARCHAR, PASSWORD VARCHAR,
                                        FULL_NAME VARCHAR, ROLE NUMBER,
                                        STATUS NUMBER, ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_USER_LOGIN VARCHAR(20);

    LAST_USER_PASSWORD VARCHAR(20);

    LAST_USER_FULL_NAME VARCHAR(250);

    LAST_USER_ROLE NUMBER(10);

    LAST_USER_STATUS NUMBER(10);
BEGIN
    SELECT USER_LOGIN.VALUE INTO LAST_USER_LOGIN
    FROM USER_LOGIN
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM USER_LOGIN
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT USER_PASSWORD.VALUE INTO LAST_USER_PASSWORD
    FROM USER_PASSWORD
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM USER_PASSWORD
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT USER_FULL_NAME.VALUE INTO LAST_USER_FULL_NAME
    FROM USER_FULL_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM USER_FULL_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT USER_ROLE.VALUE INTO LAST_USER_ROLE
    FROM USER_ROLE
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM USER_ROLE
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT USER_STATUS.VALUE INTO LAST_USER_STATUS
    FROM USER_STATUS
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM USER_STATUS
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF LOGIN !=
       LAST_USER_LOGIN THEN
        INSERT INTO USER_LOGIN
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, LOGIN, CurDate);
    END IF;
    IF PASSWORD !=
       LAST_USER_PASSWORD THEN
        INSERT INTO USER_PASSWORD
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, PASSWORD, CurDate);
    END IF;
    IF FULL_NAME !=
       LAST_USER_FULL_NAME THEN
        INSERT INTO USER_FULL_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, FULL_NAME, CurDate);
    END IF;
    IF ROLE !=
       LAST_USER_ROLE THEN
        INSERT INTO USER_ROLE
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, ROLE, CurDate);
    END IF;
    IF STATUS !=
       LAST_USER_STATUS THEN
        INSERT INTO USER_STATUS
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, STATUS, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_USER(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM USER_LOGIN
    WHERE USER_LOGIN.ID = DELETE_ID;
    DELETE
    FROM USER_PASSWORD
    WHERE USER_PASSWORD.ID = DELETE_ID;
    DELETE
    FROM USER_FULL_NAME
    WHERE USER_FULL_NAME.ID = DELETE_ID;
    DELETE
    FROM USER_ROLE
    WHERE USER_ROLE.ID = DELETE_ID;
    DELETE
    FROM USER_STATUS
    WHERE USER_STATUS.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE BOOK_STATUS_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(200),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM BOOK_STATUS_NAME_SYN FOR BOOK_STATUS_NAME;
CREATE VIEW BOOK_STATUS_VIEW AS
SELECT BOOK_STATUS_NAME_SYN.ID              AS ID,
       (SELECT BOOK_STATUS_NAME.VALUE
        FROM BOOK_STATUS_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM BOOK_STATUS_NAME
                             WHERE ID = BOOK_STATUS_NAME_SYN.ID
                             GROUP BY BOOK_STATUS_NAME_SYN.ID)
          AND ID = BOOK_STATUS_NAME_SYN.ID) AS NAME
FROM BOOK_STATUS_NAME_SYN,
     BOOK_STATUS_NAME
WHERE BOOK_STATUS_NAME_SYN.ID = BOOK_STATUS_NAME.ID
GROUP BY BOOK_STATUS_NAME_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE BOOK_STATUS_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_BOOK_STATUS(NAME VARCHAR) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := BOOK_STATUS_SEQ.NEXTVAL;
BEGIN
    INSERT INTO BOOK_STATUS_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, NAME, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_BOOK_STATUS(NAME VARCHAR, ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_BOOK_STATUS_NAME VARCHAR(200);
BEGIN
    SELECT BOOK_STATUS_NAME.VALUE INTO LAST_BOOK_STATUS_NAME
    FROM BOOK_STATUS_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM BOOK_STATUS_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF NAME !=
       LAST_BOOK_STATUS_NAME THEN
        INSERT INTO BOOK_STATUS_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, NAME, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_BOOK_STATUS(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM BOOK_STATUS_NAME
    WHERE BOOK_STATUS_NAME.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE BOOK_TYPE_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(200),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM BOOK_TYPE_NAME_SYN FOR BOOK_TYPE_NAME;
CREATE VIEW BOOK_TYPE_VIEW AS
SELECT BOOK_TYPE_NAME_SYN.ID              AS ID,
       (SELECT BOOK_TYPE_NAME.VALUE
        FROM BOOK_TYPE_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM BOOK_TYPE_NAME
                             WHERE ID = BOOK_TYPE_NAME_SYN.ID
                             GROUP BY BOOK_TYPE_NAME_SYN.ID)
          AND ID = BOOK_TYPE_NAME_SYN.ID) AS NAME
FROM BOOK_TYPE_NAME_SYN,
     BOOK_TYPE_NAME
WHERE BOOK_TYPE_NAME_SYN.ID = BOOK_TYPE_NAME.ID
GROUP BY BOOK_TYPE_NAME_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE BOOK_TYPE_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_BOOK_TYPE(NAME VARCHAR) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := BOOK_TYPE_SEQ.NEXTVAL;
BEGIN
    INSERT INTO BOOK_TYPE_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, NAME, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_BOOK_TYPE(NAME VARCHAR, ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_BOOK_TYPE_NAME VARCHAR(200);
BEGIN
    SELECT BOOK_TYPE_NAME.VALUE INTO LAST_BOOK_TYPE_NAME
    FROM BOOK_TYPE_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM BOOK_TYPE_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF NAME !=
       LAST_BOOK_TYPE_NAME THEN
        INSERT INTO BOOK_TYPE_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, NAME, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_BOOK_TYPE(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM BOOK_TYPE_NAME
    WHERE BOOK_TYPE_NAME.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE LIBRARY_FUND_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(1000),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE LIBRARY_FUND_AUTHOR
(
    ID          NUMBER(10),
    VALUE       VARCHAR(1000),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE LIBRARY_FUND_ISBN
(
    ID          NUMBER(10),
    VALUE       VARCHAR(150),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE LIBRARY_FUND_DESCRIPTION
(
    ID          NUMBER(10),
    VALUE       VARCHAR(1000),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE LIBRARY_FUND_RENTAL
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE LIBRARY_FUND_STATUS
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE LIBRARY_FUND_BOOK_TYPE
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE LIBRARY_FUND_HOLDER
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM LIBRARY_FUND_NAME_SYN FOR LIBRARY_FUND_NAME;
CREATE VIEW LIBRARY_FUND_VIEW AS
SELECT LIBRARY_FUND_NAME_SYN.ID              AS ID,
       (SELECT LIBRARY_FUND_NAME.VALUE
        FROM LIBRARY_FUND_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM LIBRARY_FUND_NAME
                             WHERE ID = LIBRARY_FUND_NAME_SYN.ID
                             GROUP BY LIBRARY_FUND_NAME_SYN.ID)
          AND ID = LIBRARY_FUND_NAME_SYN.ID) AS NAME,
       (SELECT LIBRARY_FUND_AUTHOR.VALUE
        FROM LIBRARY_FUND_AUTHOR
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM LIBRARY_FUND_AUTHOR
                             WHERE ID = LIBRARY_FUND_NAME_SYN.ID
                             GROUP BY LIBRARY_FUND_NAME_SYN.ID)
          AND ID = LIBRARY_FUND_NAME_SYN.ID) AS AUTHOR,
       (SELECT LIBRARY_FUND_ISBN.VALUE
        FROM LIBRARY_FUND_ISBN
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM LIBRARY_FUND_ISBN
                             WHERE ID = LIBRARY_FUND_NAME_SYN.ID
                             GROUP BY LIBRARY_FUND_NAME_SYN.ID)
          AND ID = LIBRARY_FUND_NAME_SYN.ID) AS ISBN,
       (SELECT LIBRARY_FUND_DESCRIPTION.VALUE
        FROM LIBRARY_FUND_DESCRIPTION
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM LIBRARY_FUND_DESCRIPTION
                             WHERE ID = LIBRARY_FUND_NAME_SYN.ID
                             GROUP BY LIBRARY_FUND_NAME_SYN.ID)
          AND ID = LIBRARY_FUND_NAME_SYN.ID) AS DESCRIPTION,
       (SELECT LIBRARY_FUND_RENTAL.VALUE
        FROM LIBRARY_FUND_RENTAL
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM LIBRARY_FUND_RENTAL
                             WHERE ID = LIBRARY_FUND_NAME_SYN.ID
                             GROUP BY LIBRARY_FUND_NAME_SYN.ID)
          AND ID = LIBRARY_FUND_NAME_SYN.ID) AS RENTAL,
       (SELECT LIBRARY_FUND_STATUS.VALUE
        FROM LIBRARY_FUND_STATUS
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM LIBRARY_FUND_STATUS
                             WHERE ID = LIBRARY_FUND_NAME_SYN.ID
                             GROUP BY LIBRARY_FUND_NAME_SYN.ID)
          AND ID = LIBRARY_FUND_NAME_SYN.ID) AS STATUS,
       (SELECT LIBRARY_FUND_BOOK_TYPE.VALUE
        FROM LIBRARY_FUND_BOOK_TYPE
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM LIBRARY_FUND_BOOK_TYPE
                             WHERE ID = LIBRARY_FUND_NAME_SYN.ID
                             GROUP BY LIBRARY_FUND_NAME_SYN.ID)
          AND ID = LIBRARY_FUND_NAME_SYN.ID) AS BOOK_TYPE,
       (SELECT LIBRARY_FUND_HOLDER.VALUE
        FROM LIBRARY_FUND_HOLDER
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM LIBRARY_FUND_HOLDER
                             WHERE ID = LIBRARY_FUND_NAME_SYN.ID
                             GROUP BY LIBRARY_FUND_NAME_SYN.ID)
          AND ID = LIBRARY_FUND_NAME_SYN.ID) AS HOLDER
FROM LIBRARY_FUND_NAME_SYN,
     LIBRARY_FUND_NAME,
     LIBRARY_FUND_AUTHOR,
     LIBRARY_FUND_ISBN,
     LIBRARY_FUND_DESCRIPTION,
     LIBRARY_FUND_RENTAL,
     LIBRARY_FUND_STATUS,
     LIBRARY_FUND_BOOK_TYPE,
     LIBRARY_FUND_HOLDER
WHERE LIBRARY_FUND_NAME_SYN.ID = LIBRARY_FUND_NAME.ID
  AND LIBRARY_FUND_NAME_SYN.ID = LIBRARY_FUND_AUTHOR.ID
  AND LIBRARY_FUND_NAME_SYN.ID = LIBRARY_FUND_ISBN.ID
  AND LIBRARY_FUND_NAME_SYN.ID = LIBRARY_FUND_DESCRIPTION.ID
  AND LIBRARY_FUND_NAME_SYN.ID = LIBRARY_FUND_RENTAL.ID
  AND LIBRARY_FUND_NAME_SYN.ID = LIBRARY_FUND_STATUS.ID
  AND LIBRARY_FUND_NAME_SYN.ID = LIBRARY_FUND_BOOK_TYPE.ID
  AND LIBRARY_FUND_NAME_SYN.ID = LIBRARY_FUND_HOLDER.ID
GROUP BY LIBRARY_FUND_NAME_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE LIBRARY_FUND_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_LIBRARY_FUND(NAME VARCHAR, AUTHOR VARCHAR,
                                             ISBN VARCHAR, DESCRIPTION VARCHAR,
                                             RENTAL NUMBER, STATUS NUMBER,
                                             BOOK_TYPE NUMBER, HOLDER NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := LIBRARY_FUND_SEQ.NEXTVAL;
BEGIN
    INSERT INTO LIBRARY_FUND_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, NAME, CurDate);
    INSERT INTO LIBRARY_FUND_AUTHOR
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, AUTHOR, CurDate);
    INSERT INTO LIBRARY_FUND_ISBN
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, ISBN, CurDate);
    INSERT INTO LIBRARY_FUND_DESCRIPTION
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, DESCRIPTION, CurDate);
    INSERT INTO LIBRARY_FUND_RENTAL
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, RENTAL, CurDate);
    INSERT INTO LIBRARY_FUND_STATUS
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, STATUS, CurDate);
    INSERT INTO LIBRARY_FUND_BOOK_TYPE
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, BOOK_TYPE, CurDate);
    INSERT INTO LIBRARY_FUND_HOLDER
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, HOLDER, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_LIBRARY_FUND(NAME VARCHAR, AUTHOR VARCHAR,
                                                ISBN VARCHAR,
                                                DESCRIPTION VARCHAR,
                                                RENTAL NUMBER, STATUS NUMBER,
                                                BOOK_TYPE NUMBER, HOLDER NUMBER,
                                                ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_LIBRARY_FUND_NAME VARCHAR(1000);

    LAST_LIBRARY_FUND_AUTHOR VARCHAR(1000);

    LAST_LIBRARY_FUND_ISBN VARCHAR(150);

    LAST_LIBRARY_FUND_DESCRIPTION VARCHAR(1000);

    LAST_LIBRARY_FUND_RENTAL NUMBER(10);

    LAST_LIBRARY_FUND_STATUS NUMBER(10);

    LAST_LIBRARY_FUND_BOOK_TYPE NUMBER(10);

    LAST_LIBRARY_FUND_HOLDER NUMBER(10);
BEGIN
    SELECT LIBRARY_FUND_NAME.VALUE INTO LAST_LIBRARY_FUND_NAME
    FROM LIBRARY_FUND_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM LIBRARY_FUND_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT LIBRARY_FUND_AUTHOR.VALUE INTO LAST_LIBRARY_FUND_AUTHOR
    FROM LIBRARY_FUND_AUTHOR
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM LIBRARY_FUND_AUTHOR
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT LIBRARY_FUND_ISBN.VALUE INTO LAST_LIBRARY_FUND_ISBN
    FROM LIBRARY_FUND_ISBN
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM LIBRARY_FUND_ISBN
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT LIBRARY_FUND_DESCRIPTION.VALUE INTO LAST_LIBRARY_FUND_DESCRIPTION
    FROM LIBRARY_FUND_DESCRIPTION
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM LIBRARY_FUND_DESCRIPTION
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT LIBRARY_FUND_RENTAL.VALUE INTO LAST_LIBRARY_FUND_RENTAL
    FROM LIBRARY_FUND_RENTAL
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM LIBRARY_FUND_RENTAL
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT LIBRARY_FUND_STATUS.VALUE INTO LAST_LIBRARY_FUND_STATUS
    FROM LIBRARY_FUND_STATUS
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM LIBRARY_FUND_STATUS
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT LIBRARY_FUND_BOOK_TYPE.VALUE INTO LAST_LIBRARY_FUND_BOOK_TYPE
    FROM LIBRARY_FUND_BOOK_TYPE
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM LIBRARY_FUND_BOOK_TYPE
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT LIBRARY_FUND_HOLDER.VALUE INTO LAST_LIBRARY_FUND_HOLDER
    FROM LIBRARY_FUND_HOLDER
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM LIBRARY_FUND_HOLDER
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF NAME !=
       LAST_LIBRARY_FUND_NAME THEN
        INSERT INTO LIBRARY_FUND_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, NAME, CurDate);
    END IF;
    IF AUTHOR !=
       LAST_LIBRARY_FUND_AUTHOR THEN
        INSERT INTO LIBRARY_FUND_AUTHOR
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, AUTHOR, CurDate);
    END IF;
    IF ISBN !=
       LAST_LIBRARY_FUND_ISBN THEN
        INSERT INTO LIBRARY_FUND_ISBN
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, ISBN, CurDate);
    END IF;
    IF DESCRIPTION !=
       LAST_LIBRARY_FUND_DESCRIPTION THEN
        INSERT INTO LIBRARY_FUND_DESCRIPTION
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, DESCRIPTION, CurDate);
    END IF;
    IF RENTAL !=
       LAST_LIBRARY_FUND_RENTAL THEN
        INSERT INTO LIBRARY_FUND_RENTAL
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, RENTAL, CurDate);
    END IF;
    IF STATUS !=
       LAST_LIBRARY_FUND_STATUS THEN
        INSERT INTO LIBRARY_FUND_STATUS
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, STATUS, CurDate);
    END IF;
    IF BOOK_TYPE !=
       LAST_LIBRARY_FUND_BOOK_TYPE THEN
        INSERT INTO LIBRARY_FUND_BOOK_TYPE
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, BOOK_TYPE, CurDate);
    END IF;
    IF HOLDER !=
       LAST_LIBRARY_FUND_HOLDER THEN
        INSERT INTO LIBRARY_FUND_HOLDER
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, HOLDER, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_LIBRARY_FUND(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM LIBRARY_FUND_NAME
    WHERE LIBRARY_FUND_NAME.ID = DELETE_ID;
    DELETE
    FROM LIBRARY_FUND_AUTHOR
    WHERE LIBRARY_FUND_AUTHOR.ID = DELETE_ID;
    DELETE
    FROM LIBRARY_FUND_ISBN
    WHERE LIBRARY_FUND_ISBN.ID = DELETE_ID;
    DELETE
    FROM LIBRARY_FUND_DESCRIPTION
    WHERE LIBRARY_FUND_DESCRIPTION.ID = DELETE_ID;
    DELETE
    FROM LIBRARY_FUND_RENTAL
    WHERE LIBRARY_FUND_RENTAL.ID = DELETE_ID;
    DELETE
    FROM LIBRARY_FUND_STATUS
    WHERE LIBRARY_FUND_STATUS.ID = DELETE_ID;
    DELETE
    FROM LIBRARY_FUND_BOOK_TYPE
    WHERE LIBRARY_FUND_BOOK_TYPE.ID = DELETE_ID;
    DELETE
    FROM LIBRARY_FUND_HOLDER
    WHERE LIBRARY_FUND_HOLDER.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE STUDENT_GROUP_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(250),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE STUDENT_GROUP_SPECIALTY
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM STUDENT_GROUP_NAME_SYN FOR STUDENT_GROUP_NAME;
CREATE VIEW STUDENT_GROUP_VIEW AS
SELECT STUDENT_GROUP_NAME_SYN.ID              AS ID,
       (SELECT STUDENT_GROUP_NAME.VALUE
        FROM STUDENT_GROUP_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM STUDENT_GROUP_NAME
                             WHERE ID = STUDENT_GROUP_NAME_SYN.ID
                             GROUP BY STUDENT_GROUP_NAME_SYN.ID)
          AND ID = STUDENT_GROUP_NAME_SYN.ID) AS NAME,
       (SELECT STUDENT_GROUP_SPECIALTY.VALUE
        FROM STUDENT_GROUP_SPECIALTY
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM STUDENT_GROUP_SPECIALTY
                             WHERE ID = STUDENT_GROUP_NAME_SYN.ID
                             GROUP BY STUDENT_GROUP_NAME_SYN.ID)
          AND ID = STUDENT_GROUP_NAME_SYN.ID) AS SPECIALTY
FROM STUDENT_GROUP_NAME_SYN,
     STUDENT_GROUP_NAME,
     STUDENT_GROUP_SPECIALTY
WHERE STUDENT_GROUP_NAME_SYN.ID = STUDENT_GROUP_NAME.ID
  AND STUDENT_GROUP_NAME_SYN.ID = STUDENT_GROUP_SPECIALTY.ID
GROUP BY STUDENT_GROUP_NAME_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE STUDENT_GROUP_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_STUDENT_GROUP(NAME VARCHAR, SPECIALTY NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := STUDENT_GROUP_SEQ.NEXTVAL;
BEGIN
    INSERT INTO STUDENT_GROUP_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, NAME, CurDate);
    INSERT INTO STUDENT_GROUP_SPECIALTY
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, SPECIALTY, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_STUDENT_GROUP(NAME VARCHAR, SPECIALTY NUMBER,
                                                 ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_STUDENT_GROUP_NAME VARCHAR(250);

    LAST_STUDENT_GROUP_SPECIALTY NUMBER(10);
BEGIN
    SELECT STUDENT_GROUP_NAME.VALUE INTO LAST_STUDENT_GROUP_NAME
    FROM STUDENT_GROUP_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM STUDENT_GROUP_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT STUDENT_GROUP_SPECIALTY.VALUE INTO LAST_STUDENT_GROUP_SPECIALTY
    FROM STUDENT_GROUP_SPECIALTY
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM STUDENT_GROUP_SPECIALTY
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF NAME !=
       LAST_STUDENT_GROUP_NAME THEN
        INSERT INTO STUDENT_GROUP_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, NAME, CurDate);
    END IF;
    IF SPECIALTY !=
       LAST_STUDENT_GROUP_SPECIALTY THEN
        INSERT INTO STUDENT_GROUP_SPECIALTY
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, SPECIALTY, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_STUDENT_GROUP(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM STUDENT_GROUP_NAME
    WHERE STUDENT_GROUP_NAME.ID = DELETE_ID;
    DELETE
    FROM STUDENT_GROUP_SPECIALTY
    WHERE STUDENT_GROUP_SPECIALTY.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE DISCIPLINE_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(250),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM DISCIPLINE_NAME_SYN FOR DISCIPLINE_NAME;
CREATE VIEW DISCIPLINE_VIEW AS
SELECT DISCIPLINE_NAME_SYN.ID              AS ID,
       (SELECT DISCIPLINE_NAME.VALUE
        FROM DISCIPLINE_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM DISCIPLINE_NAME
                             WHERE ID = DISCIPLINE_NAME_SYN.ID
                             GROUP BY DISCIPLINE_NAME_SYN.ID)
          AND ID = DISCIPLINE_NAME_SYN.ID) AS NAME
FROM DISCIPLINE_NAME_SYN,
     DISCIPLINE_NAME
WHERE DISCIPLINE_NAME_SYN.ID = DISCIPLINE_NAME.ID
GROUP BY DISCIPLINE_NAME_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE DISCIPLINE_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_DISCIPLINE(NAME VARCHAR) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := DISCIPLINE_SEQ.NEXTVAL;
BEGIN
    INSERT INTO DISCIPLINE_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, NAME, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_DISCIPLINE(NAME VARCHAR, ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_DISCIPLINE_NAME VARCHAR(250);
BEGIN
    SELECT DISCIPLINE_NAME.VALUE INTO LAST_DISCIPLINE_NAME
    FROM DISCIPLINE_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM DISCIPLINE_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF NAME !=
       LAST_DISCIPLINE_NAME THEN
        INSERT INTO DISCIPLINE_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, NAME, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_DISCIPLINE(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM DISCIPLINE_NAME
    WHERE DISCIPLINE_NAME.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE SPECIALTY_NAME
(
    ID          NUMBER(10),
    VALUE       VARCHAR(250),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE SPECIALTY_SPECIALTY_CODE
(
    ID          NUMBER(10),
    VALUE       VARCHAR(150),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE SPECIALTY_PARAMETER
(
    ID          NUMBER(10),
    VALUE       FLOAT,
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE SPECIALTY_DESCRIPTION
(
    ID          NUMBER(10),
    VALUE       VARCHAR(500),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM SPECIALTY_NAME_SYN FOR SPECIALTY_NAME;
CREATE VIEW SPECIALTY_VIEW AS
SELECT SPECIALTY_NAME_SYN.ID              AS ID,
       (SELECT SPECIALTY_NAME.VALUE
        FROM SPECIALTY_NAME
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM SPECIALTY_NAME
                             WHERE ID = SPECIALTY_NAME_SYN.ID
                             GROUP BY SPECIALTY_NAME_SYN.ID)
          AND ID = SPECIALTY_NAME_SYN.ID) AS NAME,
       (SELECT SPECIALTY_SPECIALTY_CODE.VALUE
        FROM SPECIALTY_SPECIALTY_CODE
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM SPECIALTY_SPECIALTY_CODE
                             WHERE ID = SPECIALTY_NAME_SYN.ID
                             GROUP BY SPECIALTY_NAME_SYN.ID)
          AND ID = SPECIALTY_NAME_SYN.ID) AS SPECIALTY_CODE,
       (SELECT SPECIALTY_PARAMETER.VALUE
        FROM SPECIALTY_PARAMETER
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM SPECIALTY_PARAMETER
                             WHERE ID = SPECIALTY_NAME_SYN.ID
                             GROUP BY SPECIALTY_NAME_SYN.ID)
          AND ID = SPECIALTY_NAME_SYN.ID) AS PARAMETER,
       (SELECT SPECIALTY_DESCRIPTION.VALUE
        FROM SPECIALTY_DESCRIPTION
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM SPECIALTY_DESCRIPTION
                             WHERE ID = SPECIALTY_NAME_SYN.ID
                             GROUP BY SPECIALTY_NAME_SYN.ID)
          AND ID = SPECIALTY_NAME_SYN.ID) AS DESCRIPTION
FROM SPECIALTY_NAME_SYN,
     SPECIALTY_NAME,
     SPECIALTY_SPECIALTY_CODE,
     SPECIALTY_PARAMETER,
     SPECIALTY_DESCRIPTION
WHERE SPECIALTY_NAME_SYN.ID = SPECIALTY_NAME.ID
  AND SPECIALTY_NAME_SYN.ID = SPECIALTY_SPECIALTY_CODE.ID
  AND SPECIALTY_NAME_SYN.ID = SPECIALTY_PARAMETER.ID
  AND SPECIALTY_NAME_SYN.ID = SPECIALTY_DESCRIPTION.ID
GROUP BY SPECIALTY_NAME_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE SPECIALTY_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_SPECIALTY(NAME VARCHAR, SPECIALTY_CODE VARCHAR,
                                          PARAMETER FLOAT,
                                          DESCRIPTION VARCHAR) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := SPECIALTY_SEQ.NEXTVAL;
BEGIN
    INSERT INTO SPECIALTY_NAME
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, NAME, CurDate);
    INSERT INTO SPECIALTY_SPECIALTY_CODE
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, SPECIALTY_CODE, CurDate);
    INSERT INTO SPECIALTY_PARAMETER
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, PARAMETER, CurDate);
    INSERT INTO SPECIALTY_DESCRIPTION
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, DESCRIPTION, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_SPECIALTY(NAME VARCHAR,
                                             SPECIALTY_CODE VARCHAR,
                                             PARAMETER FLOAT,
                                             DESCRIPTION VARCHAR,
                                             ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_SPECIALTY_NAME VARCHAR(250);

    LAST_SPECIALTY_SPECIALTY_CODE VARCHAR(150);

    LAST_SPECIALTY_PARAMETER FLOAT;

    LAST_SPECIALTY_DESCRIPTION VARCHAR(500);
BEGIN
    SELECT SPECIALTY_NAME.VALUE INTO LAST_SPECIALTY_NAME
    FROM SPECIALTY_NAME
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM SPECIALTY_NAME
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT SPECIALTY_SPECIALTY_CODE.VALUE INTO LAST_SPECIALTY_SPECIALTY_CODE
    FROM SPECIALTY_SPECIALTY_CODE
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM SPECIALTY_SPECIALTY_CODE
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT SPECIALTY_PARAMETER.VALUE INTO LAST_SPECIALTY_PARAMETER
    FROM SPECIALTY_PARAMETER
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM SPECIALTY_PARAMETER
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT SPECIALTY_DESCRIPTION.VALUE INTO LAST_SPECIALTY_DESCRIPTION
    FROM SPECIALTY_DESCRIPTION
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM SPECIALTY_DESCRIPTION
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF NAME !=
       LAST_SPECIALTY_NAME THEN
        INSERT INTO SPECIALTY_NAME
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, NAME, CurDate);
    END IF;
    IF SPECIALTY_CODE !=
       LAST_SPECIALTY_SPECIALTY_CODE THEN
        INSERT INTO SPECIALTY_SPECIALTY_CODE
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, SPECIALTY_CODE, CurDate);
    END IF;
    IF PARAMETER !=
       LAST_SPECIALTY_PARAMETER THEN
        INSERT INTO SPECIALTY_PARAMETER
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, PARAMETER, CurDate);
    END IF;
    IF DESCRIPTION !=
       LAST_SPECIALTY_DESCRIPTION THEN
        INSERT INTO SPECIALTY_DESCRIPTION
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, DESCRIPTION, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_SPECIALTY(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM SPECIALTY_NAME
    WHERE SPECIALTY_NAME.ID = DELETE_ID;
    DELETE
    FROM SPECIALTY_SPECIALTY_CODE
    WHERE SPECIALTY_SPECIALTY_CODE.ID = DELETE_ID;
    DELETE
    FROM SPECIALTY_PARAMETER
    WHERE SPECIALTY_PARAMETER.ID = DELETE_ID;
    DELETE
    FROM SPECIALTY_DESCRIPTION
    WHERE SPECIALTY_DESCRIPTION.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE STUDENTS_STUDENT
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE STUDENTS_STUDENT_GROUP
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE STUDENTS_LIBRARY_CARD
(
    ID          NUMBER(10),
    VALUE       VARCHAR(50),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM STUDENTS_STUDENT_SYN FOR STUDENTS_STUDENT;
CREATE VIEW STUDENTS_VIEW AS
SELECT STUDENTS_STUDENT_SYN.ID              AS ID,
       (SELECT STUDENTS_STUDENT.VALUE
        FROM STUDENTS_STUDENT
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM STUDENTS_STUDENT
                             WHERE ID = STUDENTS_STUDENT_SYN.ID
                             GROUP BY STUDENTS_STUDENT_SYN.ID)
          AND ID = STUDENTS_STUDENT_SYN.ID) AS STUDENT,
       (SELECT STUDENTS_STUDENT_GROUP.VALUE
        FROM STUDENTS_STUDENT_GROUP
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM STUDENTS_STUDENT_GROUP
                             WHERE ID = STUDENTS_STUDENT_SYN.ID
                             GROUP BY STUDENTS_STUDENT_SYN.ID)
          AND ID = STUDENTS_STUDENT_SYN.ID) AS STUDENT_GROUP,
       (SELECT STUDENTS_LIBRARY_CARD.VALUE
        FROM STUDENTS_LIBRARY_CARD
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM STUDENTS_LIBRARY_CARD
                             WHERE ID = STUDENTS_STUDENT_SYN.ID
                             GROUP BY STUDENTS_STUDENT_SYN.ID)
          AND ID = STUDENTS_STUDENT_SYN.ID) AS LIBRARY_CARD
FROM STUDENTS_STUDENT_SYN,
     STUDENTS_STUDENT,
     STUDENTS_STUDENT_GROUP,
     STUDENTS_LIBRARY_CARD
WHERE STUDENTS_STUDENT_SYN.ID = STUDENTS_STUDENT.ID
  AND STUDENTS_STUDENT_SYN.ID = STUDENTS_STUDENT_GROUP.ID
  AND STUDENTS_STUDENT_SYN.ID = STUDENTS_LIBRARY_CARD.ID
GROUP BY STUDENTS_STUDENT_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE STUDENTS_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_STUDENTS(STUDENT NUMBER, STUDENT_GROUP NUMBER,
                                         LIBRARY_CARD VARCHAR) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := STUDENTS_SEQ.NEXTVAL;
BEGIN
    INSERT INTO STUDENTS_STUDENT
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, STUDENT, CurDate);
    INSERT INTO STUDENTS_STUDENT_GROUP
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, STUDENT_GROUP, CurDate);
    INSERT INTO STUDENTS_LIBRARY_CARD
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, LIBRARY_CARD, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_STUDENTS(STUDENT NUMBER,
                                            STUDENT_GROUP NUMBER,
                                            LIBRARY_CARD VARCHAR,
                                            ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_STUDENTS_STUDENT NUMBER(10);

    LAST_STUDENTS_STUDENT_GROUP NUMBER(10);

    LAST_STUDENTS_LIBRARY_CARD VARCHAR(50);
BEGIN
    SELECT STUDENTS_STUDENT.VALUE INTO LAST_STUDENTS_STUDENT
    FROM STUDENTS_STUDENT
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM STUDENTS_STUDENT
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT STUDENTS_STUDENT_GROUP.VALUE INTO LAST_STUDENTS_STUDENT_GROUP
    FROM STUDENTS_STUDENT_GROUP
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM STUDENTS_STUDENT_GROUP
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT STUDENTS_LIBRARY_CARD.VALUE INTO LAST_STUDENTS_LIBRARY_CARD
    FROM STUDENTS_LIBRARY_CARD
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM STUDENTS_LIBRARY_CARD
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF STUDENT !=
       LAST_STUDENTS_STUDENT THEN
        INSERT INTO STUDENTS_STUDENT
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, STUDENT, CurDate);
    END IF;
    IF STUDENT_GROUP !=
       LAST_STUDENTS_STUDENT_GROUP THEN
        INSERT INTO STUDENTS_STUDENT_GROUP
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, STUDENT_GROUP, CurDate);
    END IF;
    IF LIBRARY_CARD !=
       LAST_STUDENTS_LIBRARY_CARD THEN
        INSERT INTO STUDENTS_LIBRARY_CARD
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, LIBRARY_CARD, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_STUDENTS(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM STUDENTS_STUDENT
    WHERE STUDENTS_STUDENT.ID = DELETE_ID;
    DELETE
    FROM STUDENTS_STUDENT_GROUP
    WHERE STUDENTS_STUDENT_GROUP.ID = DELETE_ID;
    DELETE
    FROM STUDENTS_LIBRARY_CARD
    WHERE STUDENTS_LIBRARY_CARD.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE TEACHERS_TEACHER
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE TEACHERS_STUDENT_GROUP
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE TEACHERS_DISCIPLINE
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM TEACHERS_TEACHER_SYN FOR TEACHERS_TEACHER;
CREATE VIEW TEACHERS_VIEW AS
SELECT TEACHERS_TEACHER_SYN.ID              AS ID,
       (SELECT TEACHERS_TEACHER.VALUE
        FROM TEACHERS_TEACHER
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM TEACHERS_TEACHER
                             WHERE ID = TEACHERS_TEACHER_SYN.ID
                             GROUP BY TEACHERS_TEACHER_SYN.ID)
          AND ID = TEACHERS_TEACHER_SYN.ID) AS TEACHER,
       (SELECT TEACHERS_STUDENT_GROUP.VALUE
        FROM TEACHERS_STUDENT_GROUP
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM TEACHERS_STUDENT_GROUP
                             WHERE ID = TEACHERS_TEACHER_SYN.ID
                             GROUP BY TEACHERS_TEACHER_SYN.ID)
          AND ID = TEACHERS_TEACHER_SYN.ID) AS STUDENT_GROUP,
       (SELECT TEACHERS_DISCIPLINE.VALUE
        FROM TEACHERS_DISCIPLINE
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM TEACHERS_DISCIPLINE
                             WHERE ID = TEACHERS_TEACHER_SYN.ID
                             GROUP BY TEACHERS_TEACHER_SYN.ID)
          AND ID = TEACHERS_TEACHER_SYN.ID) AS DISCIPLINE
FROM TEACHERS_TEACHER_SYN,
     TEACHERS_TEACHER,
     TEACHERS_STUDENT_GROUP,
     TEACHERS_DISCIPLINE
WHERE TEACHERS_TEACHER_SYN.ID = TEACHERS_TEACHER.ID
  AND TEACHERS_TEACHER_SYN.ID = TEACHERS_STUDENT_GROUP.ID
  AND TEACHERS_TEACHER_SYN.ID = TEACHERS_DISCIPLINE.ID
GROUP BY TEACHERS_TEACHER_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE TEACHERS_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_TEACHERS(TEACHER NUMBER, STUDENT_GROUP NUMBER,
                                         DISCIPLINE NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := TEACHERS_SEQ.NEXTVAL;
BEGIN
    INSERT INTO TEACHERS_TEACHER
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, TEACHER, CurDate);
    INSERT INTO TEACHERS_STUDENT_GROUP
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, STUDENT_GROUP, CurDate);
    INSERT INTO TEACHERS_DISCIPLINE
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, DISCIPLINE, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_TEACHERS(TEACHER NUMBER,
                                            STUDENT_GROUP NUMBER,
                                            DISCIPLINE NUMBER,
                                            ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_TEACHERS_TEACHER NUMBER(10);

    LAST_TEACHERS_STUDENT_GROUP NUMBER(10);

    LAST_TEACHERS_DISCIPLINE NUMBER(10);
BEGIN
    SELECT TEACHERS_TEACHER.VALUE INTO LAST_TEACHERS_TEACHER
    FROM TEACHERS_TEACHER
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM TEACHERS_TEACHER
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT TEACHERS_STUDENT_GROUP.VALUE INTO LAST_TEACHERS_STUDENT_GROUP
    FROM TEACHERS_STUDENT_GROUP
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM TEACHERS_STUDENT_GROUP
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT TEACHERS_DISCIPLINE.VALUE INTO LAST_TEACHERS_DISCIPLINE
    FROM TEACHERS_DISCIPLINE
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM TEACHERS_DISCIPLINE
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF TEACHER !=
       LAST_TEACHERS_TEACHER THEN
        INSERT INTO TEACHERS_TEACHER
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, TEACHER, CurDate);
    END IF;
    IF STUDENT_GROUP !=
       LAST_TEACHERS_STUDENT_GROUP THEN
        INSERT INTO TEACHERS_STUDENT_GROUP
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, STUDENT_GROUP, CurDate);
    END IF;
    IF DISCIPLINE !=
       LAST_TEACHERS_DISCIPLINE THEN
        INSERT INTO TEACHERS_DISCIPLINE
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, DISCIPLINE, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_TEACHERS(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM TEACHERS_TEACHER
    WHERE TEACHERS_TEACHER.ID = DELETE_ID;
    DELETE
    FROM TEACHERS_STUDENT_GROUP
    WHERE TEACHERS_STUDENT_GROUP.ID = DELETE_ID;
    DELETE
    FROM TEACHERS_DISCIPLINE
    WHERE TEACHERS_DISCIPLINE.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE SP_DISCIPLINE
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE SP_SPECIALTY
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM SP_DISCIPLINE_SYN FOR SP_DISCIPLINE;
CREATE VIEW SP_VIEW AS
SELECT SP_DISCIPLINE_SYN.ID              AS ID,
       (SELECT SP_DISCIPLINE.VALUE
        FROM SP_DISCIPLINE
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM SP_DISCIPLINE
                             WHERE ID = SP_DISCIPLINE_SYN.ID
                             GROUP BY SP_DISCIPLINE_SYN.ID)
          AND ID = SP_DISCIPLINE_SYN.ID) AS DISCIPLINE,
       (SELECT SP_SPECIALTY.VALUE
        FROM SP_SPECIALTY
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM SP_SPECIALTY
                             WHERE ID = SP_DISCIPLINE_SYN.ID
                             GROUP BY SP_DISCIPLINE_SYN.ID)
          AND ID = SP_DISCIPLINE_SYN.ID) AS SPECIALTY
FROM SP_DISCIPLINE_SYN,
     SP_DISCIPLINE,
     SP_SPECIALTY
WHERE SP_DISCIPLINE_SYN.ID = SP_DISCIPLINE.ID
  AND SP_DISCIPLINE_SYN.ID = SP_SPECIALTY.ID
GROUP BY SP_DISCIPLINE_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE SP_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_SP(DISCIPLINE NUMBER, SPECIALTY NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := SP_SEQ.NEXTVAL;
BEGIN
    INSERT INTO SP_DISCIPLINE
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, DISCIPLINE, CurDate);
    INSERT INTO SP_SPECIALTY
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, SPECIALTY, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_SP(DISCIPLINE NUMBER, SPECIALTY NUMBER,
                                      ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_SP_DISCIPLINE NUMBER(10);

    LAST_SP_SPECIALTY NUMBER(10);
BEGIN
    SELECT SP_DISCIPLINE.VALUE INTO LAST_SP_DISCIPLINE
    FROM SP_DISCIPLINE
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM SP_DISCIPLINE
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT SP_SPECIALTY.VALUE INTO LAST_SP_SPECIALTY
    FROM SP_SPECIALTY
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM SP_SPECIALTY
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF DISCIPLINE !=
       LAST_SP_DISCIPLINE THEN
        INSERT INTO SP_DISCIPLINE
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, DISCIPLINE, CurDate);
    END IF;
    IF SPECIALTY !=
       LAST_SP_SPECIALTY THEN
        INSERT INTO SP_SPECIALTY
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, SPECIALTY, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_SP(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM SP_DISCIPLINE
    WHERE SP_DISCIPLINE.ID = DELETE_ID;
    DELETE
    FROM SP_SPECIALTY
    WHERE SP_SPECIALTY.ID = DELETE_ID;
END;
/***************************TABLES*************************/
CREATE TABLE GD_STUDENT_GROUP
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE GD_DISCIPLINE
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM GD_STUDENT_GROUP_SYN FOR GD_STUDENT_GROUP;
CREATE VIEW GD_VIEW AS
SELECT GD_STUDENT_GROUP_SYN.ID              AS ID,
       (SELECT GD_STUDENT_GROUP.VALUE
        FROM GD_STUDENT_GROUP
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM GD_STUDENT_GROUP
                             WHERE ID = GD_STUDENT_GROUP_SYN.ID
                             GROUP BY GD_STUDENT_GROUP_SYN.ID)
          AND ID = GD_STUDENT_GROUP_SYN.ID) AS STUDENT_GROUP,
       (SELECT GD_DISCIPLINE.VALUE
        FROM GD_DISCIPLINE
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM GD_DISCIPLINE
                             WHERE ID = GD_STUDENT_GROUP_SYN.ID
                             GROUP BY GD_STUDENT_GROUP_SYN.ID)
          AND ID = GD_STUDENT_GROUP_SYN.ID) AS DISCIPLINE
FROM GD_STUDENT_GROUP_SYN,
     GD_STUDENT_GROUP,
     GD_DISCIPLINE
WHERE GD_STUDENT_GROUP_SYN.ID = GD_STUDENT_GROUP.ID
  AND GD_STUDENT_GROUP_SYN.ID = GD_DISCIPLINE.ID
GROUP BY GD_STUDENT_GROUP_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE GD_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_GD(STUDENT_GROUP NUMBER, DISCIPLINE NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := GD_SEQ.NEXTVAL;
BEGIN
    INSERT INTO GD_STUDENT_GROUP
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, STUDENT_GROUP, CurDate);
    INSERT INTO GD_DISCIPLINE
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, DISCIPLINE, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_GD(STUDENT_GROUP NUMBER, DISCIPLINE NUMBER,
                                      ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_GD_STUDENT_GROUP NUMBER(10);

    LAST_GD_DISCIPLINE NUMBER(10);
BEGIN
    SELECT GD_STUDENT_GROUP.VALUE INTO LAST_GD_STUDENT_GROUP
    FROM GD_STUDENT_GROUP
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM GD_STUDENT_GROUP
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT GD_DISCIPLINE.VALUE INTO LAST_GD_DISCIPLINE
    FROM GD_DISCIPLINE
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM GD_DISCIPLINE
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF STUDENT_GROUP !=
       LAST_GD_STUDENT_GROUP THEN
        INSERT INTO GD_STUDENT_GROUP
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, STUDENT_GROUP, CurDate);
    END IF;
    IF DISCIPLINE !=
       LAST_GD_DISCIPLINE THEN
        INSERT INTO GD_DISCIPLINE
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, DISCIPLINE, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_GD(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM GD_STUDENT_GROUP
    WHERE GD_STUDENT_GROUP.ID = DELETE_ID;
    DELETE
    FROM GD_DISCIPLINE
    WHERE GD_DISCIPLINE.ID = DELETE_ID;
END;

/***************************TABLES*************************/
CREATE TABLE RESERVE_RESID
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE RESERVE_TEACHER
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE RESERVE_ST_GROUP
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE RESERVE_DISCIPLINE
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);
CREATE TABLE RESERVE_BOOK
(
    ID          NUMBER(10),
    VALUE       NUMBER(10),
    CHANGE_TIME TIMESTAMP
);

/*************************VIEW***************************/

CREATE OR REPLACE SYNONYM RESERVE_RESID_SYN FOR RESERVE_RESID;
CREATE VIEW RESERVE_VIEW AS
SELECT RESERVE_RESID_SYN.ID              AS ID,
       (SELECT RESERVE_RESID.VALUE
        FROM RESERVE_RESID
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM RESERVE_RESID
                             WHERE ID = RESERVE_RESID_SYN.ID
                             GROUP BY RESERVE_RESID_SYN.ID)
          AND ID = RESERVE_RESID_SYN.ID) AS RESID,
       (SELECT RESERVE_TEACHER.VALUE
        FROM RESERVE_TEACHER
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM RESERVE_TEACHER
                             WHERE ID = RESERVE_RESID_SYN.ID
                             GROUP BY RESERVE_RESID_SYN.ID)
          AND ID = RESERVE_RESID_SYN.ID) AS TEACHER,
       (SELECT RESERVE_ST_GROUP.VALUE
        FROM RESERVE_ST_GROUP
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM RESERVE_ST_GROUP
                             WHERE ID = RESERVE_RESID_SYN.ID
                             GROUP BY RESERVE_RESID_SYN.ID)
          AND ID = RESERVE_RESID_SYN.ID) AS ST_GROUP,
       (SELECT RESERVE_DISCIPLINE.VALUE
        FROM RESERVE_DISCIPLINE
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM RESERVE_DISCIPLINE
                             WHERE ID = RESERVE_RESID_SYN.ID
                             GROUP BY RESERVE_RESID_SYN.ID)
          AND ID = RESERVE_RESID_SYN.ID) AS DISCIPLINE,
       (SELECT RESERVE_BOOK.VALUE
        FROM RESERVE_BOOK
        WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                             FROM RESERVE_BOOK
                             WHERE ID = RESERVE_RESID_SYN.ID
                             GROUP BY RESERVE_RESID_SYN.ID)
          AND ID = RESERVE_RESID_SYN.ID) AS BOOK
FROM RESERVE_RESID_SYN,
     RESERVE_RESID,
     RESERVE_TEACHER,
     RESERVE_ST_GROUP,
     RESERVE_DISCIPLINE,
     RESERVE_BOOK
WHERE RESERVE_RESID_SYN.ID = RESERVE_RESID.ID
  AND RESERVE_RESID_SYN.ID = RESERVE_TEACHER.ID
  AND RESERVE_RESID_SYN.ID = RESERVE_ST_GROUP.ID
  AND RESERVE_RESID_SYN.ID = RESERVE_DISCIPLINE.ID
  AND RESERVE_RESID_SYN.ID = RESERVE_BOOK.ID
GROUP BY RESERVE_RESID_SYN.ID;

/*************************SEQUENCES***************************/
CREATE SEQUENCE RESERVE_SEQ
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20;
/*************************ADD PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE ADD_RESERVE(RESID NUMBER, TEACHER NUMBER,
                                        ST_GROUP NUMBER, DISCIPLINE NUMBER,
                                        BOOK NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    CurID NUMBER(10) := RESERVE_SEQ.NEXTVAL;
BEGIN
    INSERT INTO RESERVE_RESID
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, RESID, CurDate);
    INSERT INTO RESERVE_TEACHER
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, TEACHER, CurDate);
    INSERT INTO RESERVE_ST_GROUP
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, ST_GROUP, CurDate);
    INSERT INTO RESERVE_DISCIPLINE
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, DISCIPLINE, CurDate);
    INSERT INTO RESERVE_BOOK
    (ID, VALUE, CHANGE_TIME)
    VALUES (CurID, BOOK, CurDate);
END;
/*************************CHANGE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE CHANGE_RESERVE(RESID NUMBER, TEACHER NUMBER,
                                           ST_GROUP NUMBER, DISCIPLINE NUMBER,
                                           BOOK NUMBER, ENTITY_ID IN NUMBER) IS
    CurDate TIMESTAMP := CURRENT_TIMESTAMP;
    LAST_RESERVE_RESID NUMBER(10);

    LAST_RESERVE_TEACHER NUMBER(10);

    LAST_RESERVE_ST_GROUP NUMBER(10);

    LAST_RESERVE_DISCIPLINE NUMBER(10);

    LAST_RESERVE_BOOK NUMBER(10);
BEGIN
    SELECT RESERVE_RESID.VALUE INTO LAST_RESERVE_RESID
    FROM RESERVE_RESID
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM RESERVE_RESID
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT RESERVE_TEACHER.VALUE INTO LAST_RESERVE_TEACHER
    FROM RESERVE_TEACHER
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM RESERVE_TEACHER
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT RESERVE_ST_GROUP.VALUE INTO LAST_RESERVE_ST_GROUP
    FROM RESERVE_ST_GROUP
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM RESERVE_ST_GROUP
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT RESERVE_DISCIPLINE.VALUE INTO LAST_RESERVE_DISCIPLINE
    FROM RESERVE_DISCIPLINE
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM RESERVE_DISCIPLINE
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    SELECT RESERVE_BOOK.VALUE INTO LAST_RESERVE_BOOK
    FROM RESERVE_BOOK
    WHERE CHANGE_TIME = (SELECT MAX(CHANGE_TIME)
                         FROM RESERVE_BOOK
                         WHERE ID = ENTITY_ID
                         GROUP BY ENTITY_ID);
    IF RESID !=
       LAST_RESERVE_RESID THEN
        INSERT INTO RESERVE_RESID
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, RESID, CurDate);
    END IF;
    IF TEACHER !=
       LAST_RESERVE_TEACHER THEN
        INSERT INTO RESERVE_TEACHER
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, TEACHER, CurDate);
    END IF;
    IF ST_GROUP !=
       LAST_RESERVE_ST_GROUP THEN
        INSERT INTO RESERVE_ST_GROUP
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, ST_GROUP, CurDate);
    END IF;
    IF DISCIPLINE !=
       LAST_RESERVE_DISCIPLINE THEN
        INSERT INTO RESERVE_DISCIPLINE
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, DISCIPLINE, CurDate);
    END IF;
    IF BOOK !=
       LAST_RESERVE_BOOK THEN
        INSERT INTO RESERVE_BOOK
        (ID, VALUE, CHANGE_TIME)
        VALUES (ENTITY_ID, BOOK, CurDate);
    END IF;
END;
/*************************DELETE PROCEDURE***************************/
CREATE OR REPLACE PROCEDURE DELETE_RESERVE(DELETE_ID NUMBER) IS
BEGIN
    DELETE
    FROM RESERVE_RESID
    WHERE RESERVE_RESID.ID = DELETE_ID;
    DELETE
    FROM RESERVE_TEACHER
    WHERE RESERVE_TEACHER.ID = DELETE_ID;
    DELETE
    FROM RESERVE_ST_GROUP
    WHERE RESERVE_ST_GROUP.ID = DELETE_ID;
    DELETE
    FROM RESERVE_DISCIPLINE
    WHERE RESERVE_DISCIPLINE.ID = DELETE_ID;
    DELETE
    FROM RESERVE_BOOK
    WHERE RESERVE_BOOK.ID = DELETE_ID;
END;